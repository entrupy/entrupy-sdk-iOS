// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios15.8-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name EntrupySDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AVFoundation
import Combine
import Compression
import CoreFoundation
import CoreGraphics
import CoreML
import CoreMotion
import CoreNFC
import CoreText
import CryptoKit
import DeveloperToolsSupport
@_exported import EntrupySDK
import Foundation
import ObjectiveC
import Photos
import QuartzCore
import Security
import Swift
import SwiftUI
import UIKit
import Vision
import WebKit
import _Concurrency
import _CoreNFC_UIKit
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
infix operator +| : DefaultPrecedence
infix operator +- : DefaultPrecedence
@objc(ObjcEntrupyEventName) public enum EntrupyEventName : Swift.Int {
  case captureStarted = 1
  case captureSucceeded
  case captureFailed
  case captureCancelled
  case captureTimeout
  case retakeStarted
  case retakeSucceeded
  case retakeCancelled
  case retakeFailed
  case retakeTimeout
  case authenticationBeginRequestSucceeded
  case authenticationCompleteRequestSucceeded
  case authenticationFetchRequestSucceeded
  case retakeBatchRequestSucceeded
  case errorOccurred
  case fullImageGuideButtonTap
  case popupInstructionDoNotShowAgainCheckboxTap
  case regionImageGuideButtonTap
  case freshChatButtonTap
  case certificateShareButtonTap
  case certificateDownloadButtonTap
  case certificateWebButtonTap
  case invalidQrCode
  case genericOcrSuccess
  case genericOcrError
  case genericOcrVerificationPopupShown
  case genericOCRNoTextDetected
  case rfidScanError
  case rfidScanStarted
  case rfidScanSuccess
  case rfidScanCanceled
  case historyTimelineNoEventsFound
  case notificationSignInSuccess
  case notificationError
  case notificationPushTokenRegistrationSuccess
  case notificationSignInMaxRetryReached
  case notificationJWTTokenExpired
  case uploadStarted
  case uploadSuccess
  case uploadError
  case logging
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct EntrupyCaptureResult : Swift.Codable {
  public var events: [EntrupySDK.EntrupyCaptureResultEvents]?
  public var user: EntrupySDK.EntrupyCaptureResultUser?
  public var price: EntrupySDK.EntrupyCaptureResultPrice?
  public let authentication_id: Swift.String
  public let properties: EntrupySDK.EntrupyCaptureResultProperties
  public var status: EntrupySDK.EntrupyCaptureResultStatus
  public let more_details: EntrupySDK.EntrupyCaptureResultMoreDetails?
  public var text_fields: [EntrupySDK.EntrupyCaptureResultTextField]?
  public let images: EntrupySDK.EntrupyCaptureResultImages?
  public let event_times: EntrupySDK.EntrupyCaptureResultEventTimes?
  public let timestamp: EntrupySDK.EntrupyCaptureResultTimestamp
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EntrupyCaptureResultImages : Swift.Codable {
  public let item_photo: Swift.String?
  public let uploaded_images: [EntrupySDK.EntrupyCaptureResultUploadedImages]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EntrupyCaptureResultUploadedImages : Swift.Codable {
  public let urls: EntrupySDK.EntrupyCaptureResultUploadedImagesUrls?
  public let display_name: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EntrupyCaptureResultUploadedImagesUrls : Swift.Codable {
  public let original: Swift.String?
  public let scale_micro: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EntrupyCaptureResultEventTimes : Swift.Codable {
  public let submitted_at: EntrupySDK.EntrupyCaptureResultTimestamp?
  public let result_returned_at: EntrupySDK.EntrupyCaptureResultTimestamp?
  public let initial_result_set_at: EntrupySDK.EntrupyCaptureResultTimestamp?
  public let capture_started_at: EntrupySDK.EntrupyCaptureResultTimestamp?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EntrupyCaptureResultMoreDetails : Swift.Codable {
  public let certificate: EntrupySDK.EntrupyCaptureResultMoreDetailsCertificate
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EntrupyCaptureResultMoreDetailsCertificate : Swift.Codable {
  public var preview: Swift.String?
  public var site: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EntrupyCaptureResultProperties : Swift.Codable {
  public let model: EntrupySDK.EntrupyCaptureResultPropertiesModel?
  public let function: EntrupySDK.EntrupyCaptureResultPropertiesFunction?
  public let brand: EntrupySDK.EntrupyCaptureResultPropertiesBrand
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EntrupyCaptureResultPropertiesBrand : Swift.Codable {
  public let display: [Swift.String : Swift.String]
  public let id: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EntrupyCaptureResultStatus : Swift.Codable {
  public var flag: EntrupySDK.EntrupyCaptureResultStatusFlag
  public let result: EntrupySDK.EntrupyCaptureResultStatusResult
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum EntrupyFlagId : Swift.Equatable, Swift.CustomStringConvertible, Swift.Encodable {
  case none
  case flagged
  case resolved
  case other(Swift.String)
  public init(rawValue: Swift.String)
  public var description: Swift.String {
    get
  }
  public static func == (a: EntrupySDK.EntrupyFlagId, b: EntrupySDK.EntrupyFlagId) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct EntrupyCaptureResultStatusFlag : Swift.Codable {
  public var id: EntrupySDK.EntrupyFlagId
  public let is_flaggable: Swift.Bool
  public mutating func toggle()
  public var isFlagged: Swift.Bool {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum EntrupyCaptureResultStatusId : Swift.Equatable, Swift.CustomStringConvertible, Swift.Encodable, Swift.Hashable {
  case authentic
  case unknown
  case not_supported
  case needs_review
  case invalid
  case analyzed
  case other(Swift.String)
  public init(rawValue: Swift.String, localizeValue: Swift.String)
  public var description: Swift.String {
    get
  }
  public static func == (a: EntrupySDK.EntrupyCaptureResultStatusId, b: EntrupySDK.EntrupyCaptureResultStatusId) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct EntrupyCaptureResultStatusResult : Swift.Codable {
  public let display: EntrupySDK.EntrupyCaptureResultStatusResultDisplay
  public let id: EntrupySDK.EntrupyCaptureResultStatusId
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct EntrupyCaptureResultStatusResultDisplay : Swift.Codable {
  public let header: Swift.String
  public let message: Swift.String?
  public let reasons: [EntrupySDK.EntrupyCaptureResultStatusResultDisplayReasons]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EntrupyCaptureResultStatusResultDisplayReasons : Swift.Codable {
  public let image: Swift.String?
  public let text: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EntrupyCaptureResultTextField : Swift.Codable {
  public let region_id: Swift.String?
  public let editable: Swift.Bool
  public let required: Swift.Bool
  public let is_identifier: Swift.Bool
  public var content: Swift.String?
  public let display_name: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EntrupyCaptureResultTimestamp : Swift.Codable {
  public let display: Swift.String
  public let epoch: Swift.Double
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EntrupyCaptureResultPropertiesFunction : Swift.Codable {
  public let id: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EntrupyCaptureResultPropertiesModel : Swift.Codable {
  public let display: [Swift.String : Swift.String]
  public let id: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EntrupyCaptureResultEvents : Swift.Codable {
  public let label: Swift.String
  public let title: Swift.String
  public let type: Swift.String
  public var message: Swift.String?
  public let timestamp: EntrupySDK.EntrupyCaptureResultTimestamp
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EntrupyCaptureResultUser : Swift.Codable {
  public let username: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EntrupyCaptureResultPrice : Swift.Codable {
  public let show_pricing_widget: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol EntrupyTheme {
  @objc var backgroundColor: UIKit.UIColor? { get }
  @objc var foregroundColor: UIKit.UIColor? { get }
  @objc var borderColor: UIKit.UIColor? { get }
}
@objc(EntrupyZoomButtonBackgroundState) public enum EntrupyZoomButtonBackgroundState : Swift.Int {
  case zoomIn
  case zoomOut
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(EntrupyZoomButton) @_Concurrency.MainActor @preconcurrency public class EntrupyZoomButton : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc(setButtonBackgroundState:) @_Concurrency.MainActor @preconcurrency public func setButtonBackgroundState(_ state: EntrupySDK.EntrupyZoomButtonBackgroundState)
  @objc(currentBackgroundState) @_Concurrency.MainActor @preconcurrency public func currentBackgroundState() -> EntrupySDK.EntrupyZoomButtonBackgroundState
  @objc deinit
}
extension Swift.Array {
  public subscript(safe index: Swift.Int) -> Element? {
    get
  }
}
@_hasMissingDesignatedInitializers public class EntrupyAsset : Swift.Codable {
  required public init(from decoder: any Swift.Decoder) throws
  final public let id: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct EntrupySearchResult : Swift.Codable {
  public let item_count: Swift.Int
  public let items: [EntrupySDK.EntrupyCaptureResult]
  public let next_cursor: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public class EntrupyDetailViewConfiguration : ObjectiveC.NSObject {
  final public let displayTimeline: Swift.Bool
  final public let displayUploadedImages: Swift.Bool
  final public let enableFlagging: Swift.Bool
  final public let enableItemDetailEdit: Swift.Bool
  @objc public init(displayTimeline: Swift.Bool = false, displayUploadedImages: Swift.Bool = false, enableFlagging: Swift.Bool = false, enableItemDetailEdit: Swift.Bool = false)
  @objc deinit
}
@objc(EntrupyButtonBackgroundState) public enum EntrupyButtonBackgroundState : Swift.Int {
  case tapToCapture
  case blurDetectionOn
  case moveCloser
  case handSteady
  case tapInsideToCapture
  case autoCaptureActivated
  case notDetected
  case notInCenter
  case tooFar
  case moveFar
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(EntrupyCaptureButton) @_Concurrency.MainActor @preconcurrency public class EntrupyCaptureButton : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc(setButtonBackgroundState:) @_Concurrency.MainActor @preconcurrency public func setButtonBackgroundState(_ state: EntrupySDK.EntrupyButtonBackgroundState)
  @objc(currentState) @_Concurrency.MainActor @preconcurrency public func currentState() -> EntrupySDK.EntrupyButtonBackgroundState
  @objc deinit
}
@objc(ObjCSnapIQDelegate) public protocol SnapIQDelegate {
  @objc func didProcessFrameWithResult(_ result: EntrupySDK.SnapIQResult)
}
@objc(ObjCSnapIQResult) public class SnapIQResult : ObjectiveC.NSObject {
  @objc final public let shouldCapture: Swift.Bool
  @objc final public let state: Swift.String?
  final public let _smoothedBox: CoreFoundation.CGRect?
  @objc final public let confidence: Swift.Float
  @objc final public let fps: Swift.Double
  @objc final public let inferenceTime: Swift.Double
  public init(shouldCapture: Swift.Bool, state: Swift.String?, smoothedBox: CoreFoundation.CGRect?, confidence: Swift.Float, fps: Swift.Double, inferenceTime: Swift.Double)
  @objc deinit
}
@objc(ObjCSnapIQ) @objcMembers public class SnapIQ : ObjectiveC.NSObject {
  @objc public var isModelReady: Swift.Bool {
    get
  }
  @objc weak public var delegate: (any EntrupySDK.SnapIQDelegate)?
  @objc public init(viewSize: CoreFoundation.CGSize, regionType: Swift.String = "camera", isUltraWideEnabled: Swift.Bool = false, completion: ((Swift.Bool, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func updateViewSize(_ newSize: CoreFoundation.CGSize)
  @objc(processFrameWithSampleBuffer:) public func processFrame(sampleBuffer: CoreMedia.CMSampleBuffer) -> EntrupySDK.SnapIQResult
  @objc public static func isRegionSupported(brandName: Swift.String, regionName: Swift.String) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class EntrupyImageAsset : EntrupySDK.EntrupyAsset {
  final public let name: Swift.String
  final public let directory: Swift.String
  final public let width: Swift.Double
  final public let height: Swift.Double
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension EntrupySDK.EntrupyCaptureResultTextField : Swift.Equatable {
  public static func == (lhs: EntrupySDK.EntrupyCaptureResultTextField, rhs: EntrupySDK.EntrupyCaptureResultTextField) -> Swift.Bool
}
extension QuartzCore.CALayer {
  @nonobjc public func logLayerTree(withIndent: Swift.Int = 0)
}
extension Foundation.Bundle : @unchecked Swift.Sendable {
}
extension EntrupySDK.EntrupyEventName : Swift.Equatable {}
extension EntrupySDK.EntrupyEventName : Swift.Hashable {}
extension EntrupySDK.EntrupyEventName : Swift.RawRepresentable {}
extension EntrupySDK.EntrupyZoomButtonBackgroundState : Swift.Equatable {}
extension EntrupySDK.EntrupyZoomButtonBackgroundState : Swift.Hashable {}
extension EntrupySDK.EntrupyZoomButtonBackgroundState : Swift.RawRepresentable {}
extension EntrupySDK.EntrupyButtonBackgroundState : Swift.Equatable {}
extension EntrupySDK.EntrupyButtonBackgroundState : Swift.Hashable {}
extension EntrupySDK.EntrupyButtonBackgroundState : Swift.RawRepresentable {}
